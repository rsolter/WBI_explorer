tmp_metric_name <- nested_metrics$metric[[u]]
tmp_metric_wide <- tmp_metric_data %>% spread(year,value)
tmp_metric_wide
#Dataset for Clustering
n = 150
g = 6
set.seed(g)
d <- data.frame(x = unlist(lapply(1:g, function(i) rnorm(n/g, runif(1)*i^2))),
y = unlist(lapply(1:g, function(i) rnorm(n/g, runif(1)*i^2))))
mydata<-d
mydata
#Plot 3X2 plots
attach(mtcars)
par(mfrow=c(3,2))
#Plot the original dataset
plot(mydata$x,mydata$y,main="Original Dataset")
#Scree plot to deterine the number of clusters
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata,centers=i)$withinss)
}
plot(1:15, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
# Ward Hierarchical Clustering
d <- dist(mydata, method = "euclidean") # distance matrix
fit <- hclust(d, method="ward")
plot(fit) # display dendogram
groups <- cutree(fit, k=5) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters
rect.hclust(fit, k=5, border="red")
#Silhouette analysis for determining the number of clusters
library(fpc)
asw <- numeric(20)
asw
mydata
?pam
#Silhouette analysis for determining the number of clusters
library(fpc)
asw <- numeric(20)
for (k in 2:20)
asw[[k]] <- pam(mydata, k) $ silinfo $ avg.width
k.best <- which.max(asw)
#Silhouette analysis for determining the number of clusters
library(fpc)
asw <- numeric(20)
for (k in 2:20)
asw[[k]] <- cluster::pam(mydata, k) $ silinfo $ avg.width
k.best <- which.max(asw)
k.best
cat("silhouette-optimal number of clusters:", k.best, "\n")
plot(pam(d, k.best))
plot(cluster::pam(d, k.best))
#Silhouette analysis for determining the number of clusters
asw <- numeric(20)
for (k in 2:20)
asw[[k]] <- cluster::pam(tmp_metric_wide, k) $ silinfo $ avg.width
k.best <- which.max(asw)
k.best
# Running code with 3 clusters for now
clusters <- kmeans(select(tmp_metric_wide, -country), centers = k.best)
# Average time serie for clusters
centers <- rownames_to_column(as.data.frame(clusters$centers), "cluster")
# Adding cluster id to original wide data
tmp_metric_wide <- tmp_metric_wide %>%
mutate(cluster = clusters$cluster)
# Cluster countries
clust_countries <- tmp_metric_wide %>% select(cluster, country) %>% unique() %>% group_by(cluster) %>% nest() %>% mutate(text=NA) %>% arrange(cluster)
for(l in 1:nrow(clust_countries)){
clust_id <- clust_countries$cluster[[l]]
clust_country_names <- clust_countries$data[[l]] %>% as.list()
clust_country_names <- clust_country_names[[1]]
clust_country_names <- paste(clust_country_names,collapse = ', ')
out <- paste("Cluster ",clust_id,": ",clust_country_names,sep="")
clust_countries$text[[l]] <- out
}
library(tidyverse)
library(cluster)
load(file="Datasets/processed_WDI.rdata")
# https://www.brodrigues.co/blog/2019-10-12-cluster_ts/
# http://ofdataandscience.blogspot.com/2013/03/capital-bikeshare-time-series-clustering.html
# https://stats.stackexchange.com/questions/131281/dynamic-time-warping-clustering
# https://github.com/SteffenMoritz/imputeTS
# Steps
# Break out into dfs for each metric
# run kmeans
# test 1-5 clusters
# elbow test/silhouette test
# finalize kmeans
nested_metrics <- processed_WDI %>% group_by(metric) %>% nest() %>% mutate(plot=NA,clusterData=NA)
clusterData <- list()
plots <- list()
for (u in 1:nrow(nested_metrics)){
tmp_metric_data <- nested_metrics$data[[u]] %>% as.data.frame()
tmp_metric_name <- nested_metrics$metric[[u]]
tmp_metric_wide <- tmp_metric_data %>% spread(year,value)
#Silhouette analysis for determining the number of clusters
asw <- numeric(20)
for (k in 2:20)
asw[[k]] <- cluster::pam(tmp_metric_wide, k) $ silinfo $ avg.width
k.best <- which.max(asw)
## Code for running elbow method to determine ideal number of clusters
#  wss <- map_dbl(1:5, ~{kmeans(select(tmp_metric_wide,-country), ., nstart=50,iter.max = 15 )$tot.withinss})
#  n_clust <- 1:5
#  elbow_df <- as.data.frame(cbind("n_clust" = n_clust, "wss" = wss))
#  ggplot(elbow_df) + geom_line(aes(y = wss, x = n_clust), colour = "#82518c") + theme_minimal() # will use 3
# Running code with 3 clusters for now
clusters <- kmeans(select(tmp_metric_wide, -country), centers = k.best)
# Average time serie for clusters
centers <- rownames_to_column(as.data.frame(clusters$centers), "cluster")
# Adding cluster id to original wide data
tmp_metric_wide <- tmp_metric_wide %>%
mutate(cluster = clusters$cluster)
# Cluster countries
clust_countries <- tmp_metric_wide %>% select(cluster, country) %>% unique() %>% group_by(cluster) %>% nest() %>% mutate(text=NA) %>% arrange(cluster)
for(l in 1:nrow(clust_countries)){
clust_id <- clust_countries$cluster[[l]]
clust_country_names <- clust_countries$data[[l]] %>% as.list()
clust_country_names <- clust_country_names[[1]]
clust_country_names <- paste(clust_country_names,collapse = ', ')
out <- paste("Cluster ",clust_id,": ",clust_country_names,sep="")
clust_countries$text[[l]] <- out
}
# Cluster info will form the caption for the chart
cluster_info <- paste(clust_countries$text[[1]],"\n",
clust_countries$text[[2]],"\n",
clust_countries$text[[3]],sep="")
cluster_data <- data.frame(cluster_id=1:(clusters$size %>% length()),
cluster_size=clusters$size,
cluster_countries=clust_countries$text)
clusterData[[u]] <- cluster_data
# Visualization
# long form
metric_long <- tmp_metric_wide %>%
pivot_longer(cols=c(-country, -cluster), names_to = "year", values_to = tmp_metric_name) %>%
mutate(year = lubridate::ymd(paste0(year, "-01-01"))) %>% as.data.frame()
centers_long <- centers %>%
pivot_longer(cols = -cluster, names_to = "year", values_to = tmp_metric_name) %>%
mutate(year = lubridate::ymd(paste0(year, "-01-01"))) %>% as.data.frame()
metric_col_name <- names(metric_long[4])
# outputting plots
tmp_plot <-
ggplot() +
geom_line(data = metric_long, aes_string(y = metric_col_name, x = "year", group = "country"), colour = "#82518c") +
facet_wrap(~cluster, nrow = 1) +
geom_line(data = centers_long, aes_string(y = metric_col_name, x = "year", group = "cluster"), col = "#b58900", size = 2) +
theme_minimal() +
labs(title = tmp_metric_name, caption = cluster_info[1]) +
theme(plot.caption = element_text(colour = "white"))
plots[[u]] <- tmp_plot
}
nested_metrics$plot <- plots
nested_metrics$clusterData <- clusterData
rm(plots,tmp_metric_data,tmp_metric_wide,tmp_plot,centers,clust_countries,
clusters,metric_long,clust_id,cluster_info,l,metric_col_name,
u,tmp_metric_name,out,clust_country_names,centers_long,cluster_data,clusterData)
cluster_info
clust_countries
u<-1
tmp_metric_data <- nested_metrics$data[[u]] %>% as.data.frame()
tmp_metric_name <- nested_metrics$metric[[u]]
tmp_metric_wide <- tmp_metric_data %>% spread(year,value)
tmp_metric_data
tmp_metric_name
tmp_metric_wide <- tmp_metric_data %>% spread(year,value)
#Silhouette analysis for determining the number of clusters
asw <- numeric(20)
for (k in 2:20)
asw[[k]] <- cluster::pam(tmp_metric_wide, k) $ silinfo $ avg.width
k.best <- which.max(asw)
k.best
# Running code with 3 clusters for now
clusters <- kmeans(select(tmp_metric_wide, -country), centers = k.best)
clusters
# Average time serie for clusters
centers <- rownames_to_column(as.data.frame(clusters$centers), "cluster")
# Adding cluster id to original wide data
tmp_metric_wide <- tmp_metric_wide %>%
mutate(cluster = clusters$cluster)
# Cluster countries
clust_countries <- tmp_metric_wide %>% select(cluster, country) %>% unique() %>% group_by(cluster) %>% nest() %>% mutate(text=NA) %>% arrange(cluster)
for(l in 1:nrow(clust_countries)){
clust_id <- clust_countries$cluster[[l]]
clust_country_names <- clust_countries$data[[l]] %>% as.list()
clust_country_names <- clust_country_names[[1]]
clust_country_names <- paste(clust_country_names,collapse = ', ')
out <- paste("Cluster ",clust_id,": ",clust_country_names,sep="")
clust_countries$text[[l]] <- out
}
clust_countries
cluster_info(paste(text[1]))
cluster_info(paste(clust_countries$text[1]))
clust_countries$text
paste(clust_countries$text)
paste0(clust_countries$text)
paste(unlist(clust_countries$text))
unlist(clust_countries$text)
clust_countries$text
clust_countries$text %>% str()
paste(clust_countries$text)
paste(clust_countries$text,collapse = ',')
paste(clust_countries$text,collapse = ',')[[1]]
# Cluster info will form the caption for the chart
cluster_info <- paste(clust_countries$text,collapse = '\n')[[1]]
cluster_data <- data.frame(cluster_id=1:(clusters$size %>% length()),
cluster_size=clusters$size,
cluster_countries=clust_countries$text)
clusterData[[u]] <- cluster_data
cluster_data <- data.frame(cluster_id=1:(clusters$size %>% length()),
cluster_size=clusters$size,
cluster_countries=clust_countries$text)
cluster_data
clusterData <- list()
plots <- list()
clusterData[[u]] <- cluster_data
# long form
metric_long <- tmp_metric_wide %>%
pivot_longer(cols=c(-country, -cluster), names_to = "year", values_to = tmp_metric_name) %>%
mutate(year = lubridate::ymd(paste0(year, "-01-01"))) %>% as.data.frame()
centers_long <- centers %>%
pivot_longer(cols = -cluster, names_to = "year", values_to = tmp_metric_name) %>%
mutate(year = lubridate::ymd(paste0(year, "-01-01"))) %>% as.data.frame()
metric_col_name <- names(metric_long[4])
# outputting plots
tmp_plot <-
ggplot() +
geom_line(data = metric_long, aes_string(y = metric_col_name, x = "year", group = "country"), colour = "#82518c") +
facet_wrap(~cluster, nrow = 1) +
geom_line(data = centers_long, aes_string(y = metric_col_name, x = "year", group = "cluster"), col = "#b58900", size = 2) +
theme_minimal() +
labs(title = tmp_metric_name, caption = cluster_info[1]) +
theme(plot.caption = element_text(colour = "white"))
plots[[u]] <- tmp_plot
tmp_plot
library(tidyverse)
library(cluster)
load(file="Datasets/processed_WDI.rdata")
# https://www.brodrigues.co/blog/2019-10-12-cluster_ts/
# http://ofdataandscience.blogspot.com/2013/03/capital-bikeshare-time-series-clustering.html
# https://stats.stackexchange.com/questions/131281/dynamic-time-warping-clustering
# https://github.com/SteffenMoritz/imputeTS
# Steps
# Break out into dfs for each metric
# run kmeans
# test 1-5 clusters
# elbow test/silhouette test
# finalize kmeans
nested_metrics <- processed_WDI %>% group_by(metric) %>% nest() %>% mutate(plot=NA,clusterData=NA)
clusterData <- list()
plots <- list()
for (u in 1:nrow(nested_metrics)){
tmp_metric_data <- nested_metrics$data[[u]] %>% as.data.frame()
tmp_metric_name <- nested_metrics$metric[[u]]
tmp_metric_wide <- tmp_metric_data %>% spread(year,value)
#Silhouette analysis for determining the number of clusters
asw <- numeric(20)
for (k in 2:20)
asw[[k]] <- cluster::pam(tmp_metric_wide, k) $ silinfo $ avg.width
k.best <- which.max(asw)
## Code for running elbow method to determine ideal number of clusters
#  wss <- map_dbl(1:5, ~{kmeans(select(tmp_metric_wide,-country), ., nstart=50,iter.max = 15 )$tot.withinss})
#  n_clust <- 1:5
#  elbow_df <- as.data.frame(cbind("n_clust" = n_clust, "wss" = wss))
#  ggplot(elbow_df) + geom_line(aes(y = wss, x = n_clust), colour = "#82518c") + theme_minimal() # will use 3
# Running code with 3 clusters for now
clusters <- kmeans(select(tmp_metric_wide, -country), centers = k.best)
# Average time serie for clusters
centers <- rownames_to_column(as.data.frame(clusters$centers), "cluster")
# Adding cluster id to original wide data
tmp_metric_wide <- tmp_metric_wide %>%
mutate(cluster = clusters$cluster)
# Cluster countries
clust_countries <- tmp_metric_wide %>% select(cluster, country) %>% unique() %>% group_by(cluster) %>% nest() %>% mutate(text=NA) %>% arrange(cluster)
for(l in 1:nrow(clust_countries)){
clust_id <- clust_countries$cluster[[l]]
clust_country_names <- clust_countries$data[[l]] %>% as.list()
clust_country_names <- clust_country_names[[1]]
clust_country_names <- paste(clust_country_names,collapse = ', ')
out <- paste("Cluster ",clust_id,": ",clust_country_names,sep="")
clust_countries$text[[l]] <- out
}
# Cluster info will form the caption for the chart
cluster_info <- paste(clust_countries$text,collapse = '\n')[[1]]
cluster_data <- data.frame(cluster_id=1:(clusters$size %>% length()),
cluster_size=clusters$size,
cluster_countries=clust_countries$text)
clusterData[[u]] <- cluster_data
# Visualization
# long form
metric_long <- tmp_metric_wide %>%
pivot_longer(cols=c(-country, -cluster), names_to = "year", values_to = tmp_metric_name) %>%
mutate(year = lubridate::ymd(paste0(year, "-01-01"))) %>% as.data.frame()
centers_long <- centers %>%
pivot_longer(cols = -cluster, names_to = "year", values_to = tmp_metric_name) %>%
mutate(year = lubridate::ymd(paste0(year, "-01-01"))) %>% as.data.frame()
metric_col_name <- names(metric_long[4])
# outputting plots
tmp_plot <-
ggplot() +
geom_line(data = metric_long, aes_string(y = metric_col_name, x = "year", group = "country"), colour = "#82518c") +
facet_wrap(~cluster, nrow = 1) +
geom_line(data = centers_long, aes_string(y = metric_col_name, x = "year", group = "cluster"), col = "#b58900", size = 2) +
theme_minimal() +
labs(title = tmp_metric_name, caption = cluster_info[1]) +
theme(plot.caption = element_text(colour = "white"))
plots[[u]] <- tmp_plot
}
nested_metrics$plot <- plots
nested_metrics$clusterData <- clusterData
rm(plots,tmp_metric_data,tmp_metric_wide,tmp_plot,centers,clust_countries,
clusters,metric_long,clust_id,cluster_info,l,metric_col_name,
u,tmp_metric_name,out,clust_country_names,centers_long,cluster_data,clusterData)
nested_metrics$plot[[1]]
nested_metrics$plot[[2]]
nested_metrics$plot[[3]]
nested_metrics$plot[[4]]
# 01 WDI - Import
## Returns two datasets:
#   africa_geo.rdata - a collection of shape files for all African nations
#   processed_WDI.rdata - historical data for select world bank indiators. processed to replace missing values with most recently observed numbers
library(WDI)
library(tidyverse)
library(tmap)
library(zoo)
library(imputeTS)
## Shape File ----
# Gathering African country names for querying WDI
tmp_World_names <- WDI(indicator=c("NY.GDP.PCAP.PP.CD"), start=1991, end=2015)
tmp_World_names <- tmp_World_names %>% select(iso2c,country) %>% unique()
# Subsetting African Countries from WBI data
africanCountries <- c("Algeria","Angola","Benin","Botswana",
"Burkina Faso","Burundi","Cabo Verde",
"Central African Rep","Cameroon","Chad","Congo, Dem. Rep.","Congo, Rep.",
"Cote d'Ivoire","Djibouti","Egypt, Arab Rep.","Equatorial Guinea",
"Eritrea","Ethiopia","Gabon","Gambia, The",
"Ghana","Guinea","Guinea-Bissau","Kenya",
"Lesotho","Liberia","Libya","Madagascar",
"Malawi","Mali","Mauritania","Morocco",
"Mozambique","Namibia","Niger","Nigeria",
"Rwanda","Senegal","Seychelles","Sierra Leone","Somalia",
"South Africa","South Sudan","Sudan","Swaziland","Tanzania",
"Togo","Tunisia","Uganda","Zambia","Zimbabwe")
af_country_list <- tmp_World_names %>% filter(country%in%africanCountries)
# Getting geographic Shape file for same countries
library(tmap)
data("World")
World$name <- as.character(World$name)
# There are differences in some of the country names. Changing 'World' to match WBI data
World$name <- ifelse(World$name=="Dem. Rep. Congo","Congo, Dem. Rep.",
ifelse(World$name=="Congo","Congo, Rep.",
ifelse(World$name=="Egypt","Egypt, Arab Rep.",
ifelse(World$name=="Eq. Guinea","Equatorial Guinea",
ifelse(World$name=="Gambia","Gambia, The",World$name)))))
# subsetting down to necessary columns as well as african countries above, and those missing
africa_geo <- World %>%
dplyr::select(iso_a3,name,geometry) %>%
filter(name%in%c(africanCountries,"Libya","Mauritania","Central African Rep.",
"S. Sudan","Zimbabwe","Somalia","Eritrea","Djibouti","W. Sahara"))
rm(World,africanCountries)
save(africa_geo,file="Datasets/africa_geo.rdata")
## WDI Test File ----
# Indicators can be searched for by keyword
#WDIsearch('gdp')[1:10,]
WDI_dict <- WDIsearch()
# Selecting random subset of indicators
Indicators <- c("SP.DYN.LE00.IN","NY.GDP.MKTP.CD","SI.POV.GINI","IT.CEL.SETS.P2")
# Life expectancy at birth - SP.DYN.LE00.IN
# GDP (current US$) - NY.GDP.MKTP.CD
# Gini Coefficient - SI.POV.GINI
# Mobile cell subscriptions per 100 people - IT.CEL.SETS.P2
# Downloading by indicator for the last 50 years
dat <- WDI(indicator=Indicators, country = af_country_list$iso2c, start=1960, end=2017)
dat <- dat %>% select(-iso2c)
rm(af_country_list)
# There is a lot of missing data - %32%
(sum(is.na(dat))/(dim(dat)[1]*dim(dat)[2]))*100
# Imputing missing data using ImputeTS and simple interpolation
WDI <- dat %>% pivot_longer(-c(country,year),names_to = "metric",values_to = "value")
nested_WDI <- WDI %>% group_by(country,metric) %>% nest()
for(k in nrow(nested_WDI)){
tmp_series <- nested_WDI$data[[k]]
tmp_series <- as.ts(tmp_series)
imputed_tmp_series <- imputeTS::na_interpolation(tmp_series)
tmp_series2 <- as.data.frame(imputed_tmp_series)
nested_WDI$data[[k]] <- tmp_series2
}
processed_WDI <- nested_WDI %>% unnest(cols = c(data))
# Missing data is down to 12%
(sum(is.na(processed_WDI))/(dim(processed_WDI)[1]*dim(processed_WDI)[2]))*100
# NA count by year
yearlyNAs<- processed_WDI %>% group_by(year) %>% summarise(sumNA=sum(is.na(value)))
View(yearlyNAs) # Start to collect data for the majority of countries in the 90's
# NA count by country
countryNAs<- processed_WDI %>% group_by(country) %>% summarise(sumNA=sum(is.na(value)))
View(countryNAs)
# NA count by Metric
metricNAs<- processed_WDI %>% group_by(metric) %>% summarise(sumNA=sum(is.na(value)))
View(metricNAs)
# NA Count by metric over time
x<-processed_WDI %>% group_by(metric,year) %>% summarise(sumNA=sum(is.na(value)))
ggplot(x, aes(x=year,y=sumNA, group=metric)) + geom_line() + facet_wrap(facets = "metric")
# NA Count by country over time
y<-processed_WDI %>% group_by(country,year) %>% summarise(sumNA=sum(is.na(value)))
ggplot(y, aes(x=year,y=sumNA, group=country)) + geom_line() + facet_wrap(facets = "country")
# Filtering out data past 1990
processed_WDI <- processed_WDI %>% filter(year>1990)
processed_WDI %>% filter(is.na(value))
# Filtering out select countries
processed_WDI <- processed_WDI %>% filter(!country%in%c("Libya","Djibouti","Eritrea","Liberia","Somalia","South Sudan"))
save(processed_WDI,file="Datasets/processed_WDI.rdata")
processed_WDI
# Missing data is down to 12%
(sum(is.na(processed_WDI))/(dim(processed_WDI)[1]*dim(processed_WDI)[2]))*100
# Downloading by indicator for the last 50 years
dat <- WDI(#indicator=Indicators,
country = af_country_list$iso2c, start=1960, end=2017)
# 01 WDI - Import
## Returns two datasets:
#   africa_geo.rdata - a collection of shape files for all African nations
#   processed_WDI.rdata - historical data for select world bank indiators. processed to replace missing values with most recently observed numbers
library(WDI)
library(tidyverse)
library(tmap)
library(zoo)
library(imputeTS)
## Shape File ----
# Gathering African country names for querying WDI
tmp_World_names <- WDI(indicator=c("NY.GDP.PCAP.PP.CD"), start=1991, end=2015)
tmp_World_names <- tmp_World_names %>% select(iso2c,country) %>% unique()
# Subsetting African Countries from WBI data
africanCountries <- c("Algeria","Angola","Benin","Botswana",
"Burkina Faso","Burundi","Cabo Verde",
"Central African Rep","Cameroon","Chad","Congo, Dem. Rep.","Congo, Rep.",
"Cote d'Ivoire","Djibouti","Egypt, Arab Rep.","Equatorial Guinea",
"Eritrea","Ethiopia","Gabon","Gambia, The",
"Ghana","Guinea","Guinea-Bissau","Kenya",
"Lesotho","Liberia","Libya","Madagascar",
"Malawi","Mali","Mauritania","Morocco",
"Mozambique","Namibia","Niger","Nigeria",
"Rwanda","Senegal","Seychelles","Sierra Leone","Somalia",
"South Africa","South Sudan","Sudan","Swaziland","Tanzania",
"Togo","Tunisia","Uganda","Zambia","Zimbabwe")
af_country_list <- tmp_World_names %>% filter(country%in%africanCountries)
# Getting geographic Shape file for same countries
library(tmap)
data("World")
World$name <- as.character(World$name)
# There are differences in some of the country names. Changing 'World' to match WBI data
World$name <- ifelse(World$name=="Dem. Rep. Congo","Congo, Dem. Rep.",
ifelse(World$name=="Congo","Congo, Rep.",
ifelse(World$name=="Egypt","Egypt, Arab Rep.",
ifelse(World$name=="Eq. Guinea","Equatorial Guinea",
ifelse(World$name=="Gambia","Gambia, The",World$name)))))
# subsetting down to necessary columns as well as african countries above, and those missing
africa_geo <- World %>%
dplyr::select(iso_a3,name,geometry) %>%
filter(name%in%c(africanCountries,"Libya","Mauritania","Central African Rep.",
"S. Sudan","Zimbabwe","Somalia","Eritrea","Djibouti","W. Sahara"))
rm(World,africanCountries)
save(africa_geo,file="Datasets/africa_geo.rdata")
## WDI Test File ----
# Indicators can be searched for by keyword
#WDIsearch('gdp')[1:10,]
WDI_dict <- WDIsearch()
# Selecting random subset of indicators
Indicators <- c("SP.DYN.LE00.IN","NY.GDP.MKTP.CD","SI.POV.GINI","IT.CEL.SETS.P2")
# Life expectancy at birth - SP.DYN.LE00.IN
# GDP (current US$) - NY.GDP.MKTP.CD
# Gini Coefficient - SI.POV.GINI
# Mobile cell subscriptions per 100 people - IT.CEL.SETS.P2
# Downloading by indicator for the last 50 years
dat <- WDI(#indicator=Indicators,
country = af_country_list$iso2c, start=1960, end=2017)
dat <- dat %>% select(-iso2c)
rm(af_country_list)
# There is a lot of missing data - %32%
(sum(is.na(dat))/(dim(dat)[1]*dim(dat)[2]))*100
# Imputing missing data using ImputeTS and simple interpolation
WDI <- dat %>% pivot_longer(-c(country,year),names_to = "metric",values_to = "value")
nested_WDI <- WDI %>% group_by(country,metric) %>% nest()
for(k in nrow(nested_WDI)){
tmp_series <- nested_WDI$data[[k]]
tmp_series <- as.ts(tmp_series)
imputed_tmp_series <- imputeTS::na_interpolation(tmp_series)
tmp_series2 <- as.data.frame(imputed_tmp_series)
nested_WDI$data[[k]] <- tmp_series2
}
processed_WDI <- nested_WDI %>% unnest(cols = c(data))
# Handling NA values ----
# Missing data is down to 12%
(sum(is.na(processed_WDI))/(dim(processed_WDI)[1]*dim(processed_WDI)[2]))*100
# NA count by year
yearlyNAs<- processed_WDI %>% group_by(year) %>% summarise(sumNA=sum(is.na(value)))
View(yearlyNAs) # Start to collect data for the majority of countries in the 90's
# NA count by country
countryNAs<- processed_WDI %>% group_by(country) %>% summarise(sumNA=sum(is.na(value)))
View(countryNAs)
# NA count by Metric
metricNAs<- processed_WDI %>% group_by(metric) %>% summarise(sumNA=sum(is.na(value)))
View(metricNAs)
# NA Count by metric over time
x<-processed_WDI %>% group_by(metric,year) %>% summarise(sumNA=sum(is.na(value)))
ggplot(x, aes(x=year,y=sumNA, group=metric)) + geom_line() + facet_wrap(facets = "metric")
# NA Count by country over time
y<-processed_WDI %>% group_by(country,year) %>% summarise(sumNA=sum(is.na(value)))
ggplot(y, aes(x=year,y=sumNA, group=country)) + geom_line() + facet_wrap(facets = "country")
# Filtering out data past 1990
processed_WDI <- processed_WDI %>% filter(year>1990)
processed_WDI %>% filter(is.na(value))
# Filtering out select countries
processed_WDI <- processed_WDI %>% filter(!country%in%c("Libya","Djibouti","Eritrea","Liberia","Somalia","South Sudan"))
dim(dat)
head(dat)
dat_full<-WDI::WDIbulk()
